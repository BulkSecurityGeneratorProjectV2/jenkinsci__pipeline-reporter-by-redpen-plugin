package org.jenkinsci.plugins.redpen;

import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.Extension;
import hudson.model.AbstractDescribableImpl;
import hudson.model.Descriptor;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import org.apache.commons.lang.StringUtils;
import org.jenkinsci.plugins.redpen.constant.Constants;
import org.jenkinsci.plugins.redpen.models.TestFrameWork;
import org.jenkinsci.plugins.redpen.service.RedpenJenkinsCore;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.QueryParameter;

import java.util.Optional;

@EqualsAndHashCode(callSuper = true)
@Extension
@NoArgsConstructor
@Data
public class RedpenTestFrameworkConfig extends AbstractDescribableImpl<RedpenTestFrameworkConfig> {
    private String testFrameWork;
    private String testFrameWorkPath;

    @DataBoundConstructor
    public RedpenTestFrameworkConfig(String testFrameWork, String testFrameWorkPath) {
        this.testFrameWork = testFrameWork;
        this.testFrameWorkPath = testFrameWorkPath;
    }

    @Extension
    public static class DescriptorImpl extends Descriptor<RedpenTestFrameworkConfig> {

        @NonNull
        @Override
        public String getDisplayName() {
            return "Add Test Framework";
        }

        public ListBoxModel doFillTestFrameWorkItems() {

            ListBoxModel list = new ListBoxModel();
            list.add(Constants.NONE_DISPLAY_NAME, "");
            list.add(Constants.WEB_DRIVER_IO_DISPLAY_NAME, Constants.WEB_DRIVER_IO);
            list.add(Constants.SELENIUM_DISPLAY_NAME, Constants.SELENIUM);
            list.add(Constants.NONE_DISPLAY_NAME, "");
            list.add(Constants.JACOCO_DISPLAY_NAME, Constants.JACOCO);
            list.add(Constants.JUNIT_DISPLAY_NAME, Constants.JUNIT);
            list.add(Constants.NUNIT_DISPLAY_NAME, Constants.NUNIT);
            list.add(Constants.JEST_DISPLAY_NAME, Constants.JEST);

            return list;
        }

        public FormValidation doCheckTestFrameWork(@QueryParameter String value) {

            if (StringUtils.isBlank(value)) {
                return FormValidation.ok();
            }

            Optional<TestFrameWork> availableInList = RedpenJenkinsCore.isAvailableInList(value);

            if (availableInList.isPresent()) {
                TestFrameWork testFrameWork = availableInList.get();
                return FormValidation.ok(String.format("Default Path : '%s' ", testFrameWork.getPath()));
            }

            return FormValidation.ok();
        }

    }
}
